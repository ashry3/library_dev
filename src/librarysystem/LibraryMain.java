/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package librarysystem;

import java.awt.Color;
import java.awt.Desktop;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.time.Duration;
import java.time.Instant;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JCheckBox;

/**
 *
 * @author lenovo
 */
public class LibraryMain extends javax.swing.JFrame {

    /**
     * Creates new form LibraryMain
     */
    public LibraryMain() {
        initComponents();
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        BG = new javax.swing.JPanel();
        TopSide = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        BookSectiontop = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        IssueSectiontop = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        LogOut = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        DownSide = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Home = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        IssueSectionDown = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        IssueTable = new javax.swing.JTable();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        BookSectionDown = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BG.setBackground(new java.awt.Color(255, 255, 255));

        TopSide.setBackground(new java.awt.Color(13, 71, 161));

        jLabel2.setBackground(new java.awt.Color(13, 71, 161));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/book-stack.png"))); // NOI18N

        BookSectiontop.setBackground(new java.awt.Color(237, 236, 236));
        BookSectiontop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BookSectiontopMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BookSectiontopMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BookSectiontopMouseExited(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(199, 239, 239));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/add (2).png"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(204, 204, 204));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(17, 56, 247));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Book Section");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout BookSectiontopLayout = new javax.swing.GroupLayout(BookSectiontop);
        BookSectiontop.setLayout(BookSectiontopLayout);
        BookSectiontopLayout.setHorizontalGroup(
            BookSectiontopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        BookSectiontopLayout.setVerticalGroup(
            BookSectiontopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookSectiontopLayout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        IssueSectiontop.setBackground(new java.awt.Color(237, 236, 236));
        IssueSectiontop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IssueSectiontopMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                IssueSectiontopMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                IssueSectiontopMouseExited(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(204, 204, 204));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/add (2).png"))); // NOI18N

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(17, 56, 247));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Issue Section");

        javax.swing.GroupLayout IssueSectiontopLayout = new javax.swing.GroupLayout(IssueSectiontop);
        IssueSectiontop.setLayout(IssueSectiontopLayout);
        IssueSectiontopLayout.setHorizontalGroup(
            IssueSectiontopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        IssueSectiontopLayout.setVerticalGroup(
            IssueSectiontopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IssueSectiontopLayout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        LogOut.setBackground(new java.awt.Color(237, 236, 236));
        LogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogOutMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LogOutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LogOutMouseExited(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(204, 204, 204));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/close.png"))); // NOI18N

        jLabel9.setBackground(new java.awt.Color(204, 204, 204));
        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(26, 35, 126));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Log out");

        javax.swing.GroupLayout LogOutLayout = new javax.swing.GroupLayout(LogOut);
        LogOut.setLayout(LogOutLayout);
        LogOutLayout.setHorizontalGroup(
            LogOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        LogOutLayout.setVerticalGroup(
            LogOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LogOutLayout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Librarin Mangement");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Returners");

        javax.swing.GroupLayout TopSideLayout = new javax.swing.GroupLayout(TopSide);
        TopSide.setLayout(TopSideLayout);
        TopSideLayout.setHorizontalGroup(
            TopSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopSideLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(TopSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(TopSideLayout.createSequentialGroup()
                        .addComponent(BookSectiontop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(208, 208, 208)
                        .addComponent(IssueSectiontop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(237, 237, 237)
                        .addComponent(LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59))
                    .addGroup(TopSideLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(TopSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(81, 81, 81))))
        );
        TopSideLayout.setVerticalGroup(
            TopSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopSideLayout.createSequentialGroup()
                .addGroup(TopSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TopSideLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(TopSideLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(TopSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BookSectiontop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IssueSectiontop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        DownSide.setBackground(new java.awt.Color(255, 255, 255));
        DownSide.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Home.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/4207 (Custom).jpg"))); // NOI18N

        javax.swing.GroupLayout HomeLayout = new javax.swing.GroupLayout(Home);
        Home.setLayout(HomeLayout);
        HomeLayout.setHorizontalGroup(
            HomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 998, Short.MAX_VALUE)
        );
        HomeLayout.setVerticalGroup(
            HomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", Home);

        IssueSectionDown.setBackground(new java.awt.Color(255, 255, 255));

        IssueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book_Id", "Book_Name", "Book_Price", "Book_Type", "Book_Author", "timer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(IssueTable);
        if (IssueTable.getColumnModel().getColumnCount() > 0) {
            IssueTable.getColumnModel().getColumn(5).setMinWidth(250);
        }

        jButton12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/read.png"))); // NOI18N
        jButton12.setText("View");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/broom.png"))); // NOI18N
        jButton13.setText("Clear");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/reading-book.png"))); // NOI18N
        jButton7.setText("Issue");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/return.png"))); // NOI18N
        jButton4.setText("Return");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/library.png"))); // NOI18N
        jButton5.setText("Books");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IssueSectionDownLayout = new javax.swing.GroupLayout(IssueSectionDown);
        IssueSectionDown.setLayout(IssueSectionDownLayout);
        IssueSectionDownLayout.setHorizontalGroup(
            IssueSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IssueSectionDownLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(IssueSectionDownLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jButton4)
                .addGap(96, 96, 96)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        IssueSectionDownLayout.setVerticalGroup(
            IssueSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IssueSectionDownLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(IssueSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton12)
                    .addGroup(IssueSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton4)
                        .addComponent(jButton5))
                    .addGroup(IssueSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton7)
                        .addComponent(jButton13)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("tab3", IssueSectionDown);

        BookSectionDown.setBackground(new java.awt.Color(255, 255, 255));

        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/delete.png"))); // NOI18N
        jButton9.setText("Delete");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/read.png"))); // NOI18N
        jButton8.setText("View");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/broom.png"))); // NOI18N
        jButton10.setText("Clear");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book_Id", "Book_Name", "Book_price", "Book_type", "Book_author"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/add.png"))); // NOI18N
        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel24.setText("Book author :");

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/broom.png"))); // NOI18N
        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel21.setText("Book name :");

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel23.setText("Book type:");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel22.setText("Book price :");

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/paper.png"))); // NOI18N
        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/statistics-report.png"))); // NOI18N
        jButton14.setText("Library statistics");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField4KeyTyped(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Table For View", "Books", "Deleted Books" }));

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/Images/database.png"))); // NOI18N
        jButton6.setText("restore");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/librarysystem/open-book.png"))); // NOI18N
        jButton11.setText("Books");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BookSectionDownLayout = new javax.swing.GroupLayout(BookSectionDown);
        BookSectionDown.setLayout(BookSectionDownLayout);
        BookSectionDownLayout.setHorizontalGroup(
            BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookSectionDownLayout.createSequentialGroup()
                .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BookSectionDownLayout.createSequentialGroup()
                        .addContainerGap(19, Short.MAX_VALUE)
                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookSectionDownLayout.createSequentialGroup()
                                .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(BookSectionDownLayout.createSequentialGroup()
                                        .addComponent(jLabel24)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(BookSectionDownLayout.createSequentialGroup()
                                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(35, 35, 35)
                                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                            .addComponent(jTextField4))))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookSectionDownLayout.createSequentialGroup()
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))))
                    .addGroup(BookSectionDownLayout.createSequentialGroup()
                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BookSectionDownLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jButton1)
                                .addGap(34, 34, 34)
                                .addComponent(jButton2))
                            .addGroup(BookSectionDownLayout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BookSectionDownLayout.createSequentialGroup()
                        .addComponent(jButton14)
                        .addGap(18, 18, 18)
                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BookSectionDownLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)
                                .addGap(32, 32, 32)
                                .addComponent(jButton8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(jButton10))
                            .addGroup(BookSectionDownLayout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(34, 34, 34))
        );
        BookSectionDownLayout.setVerticalGroup(
            BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookSectionDownLayout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton9)
                        .addComponent(jButton3)
                        .addComponent(jButton14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton1)
                        .addComponent(jButton2))
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(BookSectionDownLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6))
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BookSectionDownLayout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addGap(40, 40, 40)
                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addGap(40, 40, 40)
                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(BookSectionDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton11)))
                .addGap(23, 23, 23))
        );

        jTabbedPane1.addTab("tab2", BookSectionDown);

        DownSide.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -37, -1, 550));

        javax.swing.GroupLayout BGLayout = new javax.swing.GroupLayout(BG);
        BG.setLayout(BGLayout);
        BGLayout.setHorizontalGroup(
            BGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TopSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(DownSide, javax.swing.GroupLayout.DEFAULT_SIZE, 985, Short.MAX_VALUE)
        );
        BGLayout.setVerticalGroup(
            BGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BGLayout.createSequentialGroup()
                .addComponent(TopSide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DownSide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(BG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BookSectiontopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BookSectiontopMouseClicked
        playMusic("sound\\click.wav");

        IssueSectiontop.setBackground(new Color(0xEDECEC));
        BookSectiontop.setBackground(new Color(0xc5c5c5));
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_BookSectiontopMouseClicked

    private void BookSectiontopMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BookSectiontopMouseEntered

    }//GEN-LAST:event_BookSectiontopMouseEntered

    private void BookSectiontopMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BookSectiontopMouseExited

    }//GEN-LAST:event_BookSectiontopMouseExited

    private void IssueSectiontopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IssueSectiontopMouseClicked
        playMusic("sound\\click.wav");

        IssueSectiontop.setBackground(new Color(0xc5c5c5));
        BookSectiontop.setBackground(new Color(0xEDECEC));
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_IssueSectiontopMouseClicked

    private void IssueSectiontopMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IssueSectiontopMouseEntered

    }//GEN-LAST:event_IssueSectiontopMouseEntered

    private void IssueSectiontopMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IssueSectiontopMouseExited

    }//GEN-LAST:event_IssueSectiontopMouseExited

    private void LogOutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogOutMouseEntered
        LogOut.setBackground(new Color(0xFF0000));
    }//GEN-LAST:event_LogOutMouseEntered

    private void LogOutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogOutMouseExited
        LogOut.setBackground(new Color(0xEDECEC));
    }//GEN-LAST:event_LogOutMouseExited

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        playMusic("sound\\click.wav");

        String bookName = JOptionPane.showInputDialog(this, "Enter the book name to check out:");

        if (bookName == null || bookName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a valid book name.");
            return;
        }

        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");

            String checkSql = "SELECT is_checked_out FROM library_section WHERE book_name = ?";
            PreparedStatement checkPs = c.prepareStatement(checkSql);
            checkPs.setString(1, bookName);
            ResultSet rs = checkPs.executeQuery();

            if (rs.next()) {
                int isCheckedOut = rs.getInt("is_checked_out");
                if (isCheckedOut == 1) {
                    JOptionPane.showMessageDialog(this, "The book is already checked out.");
                } else {
                    String updateSql = "UPDATE library_section SET is_checked_out = 1, checkout_time = SYSTIMESTAMP WHERE book_name = ?";
                    PreparedStatement updatePs = c.prepareStatement(updateSql);
                    updatePs.setString(1, bookName);
                    updatePs.executeUpdate();
                    JOptionPane.showMessageDialog(this, "The book has been successfully checked out.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "The book was not found.");
            }
        } catch (ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        playMusic("sound\\click.wav");

        String bookName = JOptionPane.showInputDialog(this, "Enter the book name to return:");

        if (bookName == null || bookName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a valid book name.");
            return;
        }

        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");

            String checkSql = "SELECT is_checked_out, checkout_time FROM library_section WHERE book_name = ?";
            PreparedStatement checkPs = c.prepareStatement(checkSql);
            checkPs.setString(1, bookName);
            ResultSet rs = checkPs.executeQuery();

            if (rs.next()) {
                int isCheckedOut = rs.getInt("is_checked_out");
                Timestamp checkoutTime = rs.getTimestamp("checkout_time");

                if (isCheckedOut == 0) {
                    JOptionPane.showMessageDialog(this, "The book is currently not checked out.");
                } else {
                    String updateSql = "UPDATE library_section SET is_checked_out = 0, return_time = SYSTIMESTAMP WHERE book_name = ?";
                    PreparedStatement updatePs = c.prepareStatement(updateSql);
                    updatePs.setString(1, bookName);
                    updatePs.executeUpdate();

                    // Stop the timer if it's running
                    if (timer != null && timer.isRunning()) {
                        timer.stop();
                    }

                    // Display the time elapsed since checkout
                    String timeSql = "SELECT EXTRACT(DAY FROM (return_time - checkout_time)) AS days_diff, "
                            + "EXTRACT(HOUR FROM (return_time - checkout_time)) AS hours_diff, "
                            + "EXTRACT(MINUTE FROM (return_time - checkout_time)) AS minutes_diff, "
                            + "EXTRACT(SECOND FROM (return_time - checkout_time)) AS seconds_diff "
                            + "FROM library_section WHERE book_name = ?";
                    PreparedStatement timePs = c.prepareStatement(timeSql);
                    timePs.setString(1, bookName);
                    ResultSet timeRs = timePs.executeQuery();

                    if (timeRs.next()) {
                        long days = timeRs.getLong("days_diff");
                        long hours = timeRs.getLong("hours_diff");
                        long minutes = timeRs.getLong("minutes_diff");
                        long seconds = timeRs.getLong("seconds_diff");

                        JOptionPane.showMessageDialog(this, "The book has been successfully returned. It was checked out for "
                                + days + " days, " + hours + " hours, " + minutes + " minutes, and " + seconds + " seconds.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "The book was not found.");
            }
        } catch (ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        playMusic("sound\\click.wav");

        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");

            String sql = "INSERT INTO library_section (book_id, book_name, book_price, book_type, book_author, is_checked_out, checkout_time, return_time) "
                    + "VALUES (bookId.nextval, ?, ?, ?, ?, 0, NULL, NULL)";
            PreparedStatement ps = c.prepareStatement(sql);

            if (regex()) {
                ps.setString(1, jTextField2.getText());
                ps.setInt(2, Integer.parseInt(jTextField3.getText()));
                ps.setString(3, jTextField4.getText());
                ps.setString(4, jTextField5.getText());
            }

            int rows = ps.executeUpdate();
            JOptionPane.showMessageDialog(this, rows + " book(s) added");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void LogOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogOutMouseClicked
        playMusic("sound\\Shutdown.wav");

        new HomePage().setVisible(true);
        dispose();
    }//GEN-LAST:event_LogOutMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        playMusic("sound\\click.wav");

        String[] options = {"Book Name", "Type", "Price", "Author"};
        String choice = (String) JOptionPane.showInputDialog(this, "Select Type of Search:", "Search For Book",
                JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

        if (choice != null) {
            String query = "";
            String userInput = JOptionPane.showInputDialog(this, "Enter " + choice + " To Search:");
            if (userInput != null && !userInput.trim().isEmpty()) {
                try {
                    Class.forName("oracle.jdbc.driver.OracleDriver");
                    Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");

                    PreparedStatement ps = null;
                    String message = "";

                    if (jComboBox1.getSelectedIndex() == 1) {
                        switch (choice) {
                            case "Book Name":
                                query = "SELECT * FROM library_section WHERE book_name LIKE ?";
                                ps = c.prepareStatement(query);
                                ps.setString(1, "%" + userInput + "%");
                                message = "There Is No Book Found By This Name: " + userInput;
                                break;
                            case "Type":
                                query = "SELECT * FROM library_section WHERE book_type LIKE ?";
                                ps = c.prepareStatement(query);
                                ps.setString(1, "%" + userInput + "%");
                                message = "There Is No Book Found By This Type: " + userInput;
                                break;
                            case "Price":
                    try {
                                int price = Integer.parseInt(userInput);
                                query = "SELECT * FROM library_section WHERE book_price = ?";
                                ps = c.prepareStatement(query);
                                ps.setInt(1, price);
                                message = "There Is No Book Found By This Price: " + price;
                            } catch (NumberFormatException ex) {
                                JOptionPane.showMessageDialog(this, "There Is No Book With This Price");
                                return;
                            }
                            break;
                            case "Author":
                                query = "SELECT * FROM library_section WHERE book_author LIKE ?";
                                ps = c.prepareStatement(query);
                                ps.setString(1, "%" + userInput + "%");
                                message = "There Is No Book Found By This Author: " + userInput;
                                break;
                            default:
                                JOptionPane.showMessageDialog(this, "Unrecognized Search Type.");
                                return;
                        }

                    }
                    if (jComboBox1.getSelectedIndex() == 2) {
                        switch (choice) {
                            case "Book Name":
                                query = "SELECT * FROM restore_Books WHERE book_name LIKE ?";
                                ps = c.prepareStatement(query);
                                ps.setString(1, "%" + userInput + "%");
                                message = "There Is No Book Found By This Name: " + userInput;
                                break;
                            case "Type":
                                query = "SELECT * FROM restore_Books WHERE book_type LIKE ?";
                                ps = c.prepareStatement(query);
                                ps.setString(1, "%" + userInput + "%");
                                message = "There Is No Book Found By This Type: " + userInput;
                                break;
                            case "Price":
                    try {
                                int price = Integer.parseInt(userInput);
                                query = "SELECT * FROM restore_Books WHERE book_price = ?";
                                ps = c.prepareStatement(query);
                                ps.setInt(1, price);
                                message = "There Is No Book Found By This Price: " + price;
                            } catch (NumberFormatException ex) {
                                JOptionPane.showMessageDialog(this, "There Is No Book With This Price");
                                return;
                            }
                            break;
                            case "Author":
                                query = "SELECT * FROM restore_Books WHERE book_author LIKE ?";
                                ps = c.prepareStatement(query);
                                ps.setString(1, "%" + userInput + "%");
                                message = "There Is No Book Found By This Author: " + userInput;
                                break;
                            default:
                                JOptionPane.showMessageDialog(this, "Unrecognized Search Type.");
                                return;
                        }

                    }
                    ResultSet rs = ps.executeQuery();
                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);
                    boolean found = false;
                    while (rs.next()) {
                        found = true;
                        dtm.addRow(new Object[]{
                            rs.getInt("book_id"),
                            rs.getString("book_name"),
                            rs.getInt("book_price"),
                            rs.getString("book_type"),
                            rs.getString("book_author")
                        });
                    }

                    if (!found) {
                        JOptionPane.showMessageDialog(this, message);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    System.out.println(ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Enter " + choice + " to Search.");
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        playMusic("sound\\click.wav");

        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");

            String totalBooksSql = "SELECT COUNT(*) AS total_books FROM library_section";
            Statement totalBooksStmt = c.createStatement();
            ResultSet totalBooksRs = totalBooksStmt.executeQuery(totalBooksSql);
            totalBooksRs.next();
            int totalBooks = totalBooksRs.getInt("total_books");

            String borrowedBooksSql = "SELECT COUNT(*) AS borrowed_books FROM library_section WHERE is_checked_out = 1";
            Statement borrowedBooksStmt = c.createStatement();
            ResultSet borrowedBooksRs = borrowedBooksStmt.executeQuery(borrowedBooksSql);
            borrowedBooksRs.next();
            int borrowedBooks = borrowedBooksRs.getInt("borrowed_books");

            int availableBooks = totalBooks - borrowedBooks;

            String reportContent = "<html><head><style>"
                    + "body { font-family: Arial, sans-serif; background-color: #f0f0f0; color: #333; }"
                    + ".container { width: 80%; margin: 0 auto; padding: 20px; background: #fff; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }"
                    + "h1 { text-align: center; }"
                    + ".print-button { display: block; margin: 20px auto; padding: 10px 20px; font-size: 16px; color: white; background-color: #4CAF50; border: none; border-radius: 5px; cursor: pointer; }"
                    + "</style></head><body>"
                    + "<div class='container'>"
                    + "<h1>Library Statistics</h1>"
                    + "<p><b>Total Books:</b> " + totalBooks + "</p>"
                    + "<p><b>Borrowed Books:</b> " + borrowedBooks + "</p>"
                    + "<p><b>Available Books:</b> " + availableBooks + "</p>"
                    + "<button class='print-button' onclick='window.print()'>Print</button>"
                    + "</div>"
                    + "</body></html>";

            File reportFile = new File("library_stats.html");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(reportFile))) {
                writer.write(reportContent);
            }

            Desktop.getDesktop().browse(reportFile.toURI());

        } catch (ClassNotFoundException | SQLException | IOException ex) {
            Logger.getLogger(LibraryMain.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        playMusic("sound\\click.wav");

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_jButton10ActionPerformed
    private Timer timer;

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        playMusic("sound\\click.wav");

        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");

            if (timer != null && timer.isRunning()) {
                timer.stop();
            }

            timer = new Timer(1000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    updateTable();
                }
            });
            timer.start();

            updateTable();

        } catch (ClassNotFoundException ex) {
            playMusic("sound\\Error.wav");
            System.out.println(ex.getMessage());
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            playMusic("sound\\Error.wav");
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        playMusic("sound\\click.wav");

        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");
            String sql = "";

            if (jComboBox1.getSelectedIndex() == 1) {
                sql = "SELECT * FROM library_section ORDER BY book_id";
            } else {
                sql = "SELECT * FROM restore_Books ORDER BY book_id";
            }

            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery(sql);
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            while (rs.next()) {
                dtm.addRow(new Object[]{
                    rs.getString("book_id"),
                    rs.getString("book_name"),
                    rs.getInt("book_price"),
                    rs.getString("book_type"),
                    rs.getString("book_author")
                });
            }
        } catch (ClassNotFoundException | SQLException ex) {
            playMusic("sound\\Error.wav");
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        playMusic("sound\\click.wav");

        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        playMusic("sound\\click.wav");

        try {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");

            String sql = "";
            String sqlInsert = "";
            int CurrentRow = jTable1.getSelectedRow();

            if (CurrentRow < 0) {
                JOptionPane.showMessageDialog(this, "No rows selected");
                return;
            }

            Object Book_id = model.getValueAt(CurrentRow, 0);
            Object Book_name = model.getValueAt(CurrentRow, 1);
            Object Book_Price = model.getValueAt(CurrentRow, 2);
            Object Book_Type = model.getValueAt(CurrentRow, 3);
            Object Book_Arthor = model.getValueAt(CurrentRow, 4);

            if (jComboBox1.getSelectedIndex() == 1) {
                sqlInsert = "insert into restore_Books values(?,?,?,?,?)";
                sql = "delete from library_section where BOOK_ID = ?";
            } else if (jComboBox1.getSelectedIndex() == 2) {
                sql = "delete from restore_Books where BOOK_ID = ?";
            }

            PreparedStatement psDelete = c.prepareStatement(sql);
            psDelete.setObject(1, Book_id);

            int rows = psDelete.executeUpdate();
            if (jComboBox1.getSelectedIndex() == 1) {
                PreparedStatement psInsert = c.prepareStatement(sqlInsert);

                psInsert.setInt(1, Integer.parseInt(String.valueOf(Book_id)));
                psInsert.setString(2, String.valueOf(Book_name));
                psInsert.setInt(3, Integer.parseInt(String.valueOf(Book_Price)));
                psInsert.setString(4, String.valueOf(Book_Type));
                psInsert.setString(5, String.valueOf(Book_Arthor));

                psInsert.executeUpdate();
                psInsert.close();
            }

            JOptionPane.showMessageDialog(this, rows + " rows deleted");
            model.removeRow(CurrentRow);

            psDelete.close();
            c.close();
        } catch (ClassNotFoundException ex) {
            playMusic("sound\\Error.wav");
            Logger.getLogger(LibraryMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error loading database driver: " + ex.getMessage());
        } catch (SQLException ex) {
            playMusic("sound\\Error.wav");
            Logger.getLogger(LibraryMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
        } catch (NumberFormatException ex) {
            playMusic("sound\\Error.wav");
            Logger.getLogger(LibraryMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error in data format: " + ex.getMessage());
        }

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedRowIndex = jTable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        Object Book_name = null;
        Object Book_Price = null;
        Object Book_Type = null;
        Object Book_Arthor = null;

        if (selectedRowIndex >= 0) {
            Book_name = model.getValueAt(selectedRowIndex, 1);
            Book_Price = model.getValueAt(selectedRowIndex, 2);
            Book_Type = model.getValueAt(selectedRowIndex, 3);
            Book_Arthor = model.getValueAt(selectedRowIndex, 4);
        }
        jTextField2.setText(Book_name.toString());
        jTextField3.setText(Book_Price.toString());
        jTextField4.setText(Book_Type.toString());
        jTextField5.setText(Book_Arthor.toString());

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        playMusic("sound\\click.wav");

        DefaultTableModel model = (DefaultTableModel) IssueTable.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        playMusic("sound\\click.wav");

        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");

            String sql = "SELECT book_name, book_price, book_type, book_author, "
                    + "checkout_time "
                    + "FROM library_section "
                    + "WHERE is_checked_out = 1 AND checkout_time IS NOT NULL";

            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery(sql);

            StringBuilder overdueMessage = new StringBuilder();
            StringBuilder pendingMessage = new StringBuilder();
            overdueMessage.append("<h2>Books That Need to Be Returned:</h2><ul>");
            pendingMessage.append("<h2>Books That Have Been Borrowed for Less Than 3 Hours:</h2><ul>");

            boolean hasOverdueBooks = false;
            boolean hasPendingBooks = false;

            while (rs.next()) {
                Timestamp checkoutTime = rs.getTimestamp("checkout_time");
                long hoursElapsed = Duration.between(checkoutTime.toInstant(), Instant.now()).toHours();

                if (hoursElapsed > 3) {
                    overdueMessage.append("<li><b>Book:</b> ").append(rs.getString("book_name")).append("<br>")
                            .append("<b>Price:</b> ").append(rs.getDouble("book_price")).append("<br>")
                            .append("<b>Type:</b> ").append(rs.getString("book_type")).append("<br>")
                            .append("<b>Author:</b> ").append(rs.getString("book_author")).append("<br>")
                            .append("<b>Elapsed Time:</b> ").append(hoursElapsed).append(" hours</li><br>");

                    hasOverdueBooks = true;
                } else if (hoursElapsed <= 3) {
                    pendingMessage.append("<li><b>Book:</b> ").append(rs.getString("book_name")).append("<br>")
                            .append("<b>Price:</b> ").append(rs.getDouble("book_price")).append("<br>")
                            .append("<b>Type:</b> ").append(rs.getString("book_type")).append("<br>")
                            .append("<b>Author:</b> ").append(rs.getString("book_author")).append("<br>")
                            .append("<b>Elapsed Time:</b> ").append(hoursElapsed).append(" hours</li><br>");

                    hasPendingBooks = true;
                }
            }

            overdueMessage.append("</ul>");
            pendingMessage.append("</ul>");

            String finalMessage = "<html><head><style>"
                    + "body { font-family: Arial, sans-serif; background: url('https://www.example.com/background.jpg') no-repeat center center fixed; background-size: cover; color: white; }"
                    + ".container { display: flex; justify-content: center; align-items: center; height: 100vh; flex-direction: column; }"
                    + ".half { width: 50%; padding: 20px; background-color: rgba(0, 0, 0, 0.7); border-radius: 10px; margin: 10px; }"
                    + "h1 { font-size: 3em; text-align: center; margin-bottom: 20px; }"
                    + "h2 { text-align: center; }"
                    + ".header { position: absolute; top: 20px; width: 100%; text-align: center; font-size: 4em; font-family: 'Arial Black', sans-serif; }"
                    + ".print-button { position: absolute; top: 20px; right: 20px; background-color: #4CAF50; color: white; border: none; padding: 10px 20px; font-size: 16px; cursor: pointer; border-radius: 5px; }"
                    + "</style></head><body>"
                    + "<div class='header'>Team Returners</div>"
                    + "<button class='print-button' onclick='window.print()'>Print</button>"
                    + "<div class='container'>"
                    + "<div class='half'>" + overdueMessage.toString() + "</div>"
                    + "<div class='half'>" + pendingMessage.toString() + "</div>"
                    + "</div>"
                    + "<script>"
                    + "function downloadReport() {"
                    + "  var element = document.createElement('a');"
                    + "  var content = document.documentElement.outerHTML;"
                    + "  var file = new Blob([content], {type: 'text/html'});"
                    + "  element.href = URL.createObjectURL(file);"
                    + "  element.download = 'library_report.html';"
                    + "  document.body.appendChild(element);"
                    + "  element.click();"
                    + "}"
                    + "</script>"
                    + "</body></html>";

            writeHtmlReport(finalMessage);

        } catch (ClassNotFoundException ex) {
            playMusic("sound\\Error.wav");
            Logger.getLogger(LibraryMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            playMusic("sound\\Error.wav");
            Logger.getLogger(LibraryMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        playMusic("sound\\click.wav");

        try {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");

            int CurrentRow = jTable1.getSelectedRow();

            if (CurrentRow < 0) {
                JOptionPane.showMessageDialog(this, "No rows selected");
                return;
            }

            String sql = "";
            String sqlInsert = "";

            Object Book_id = model.getValueAt(CurrentRow, 0);
            Object Book_name = model.getValueAt(CurrentRow, 1);
            Object Book_Price = model.getValueAt(CurrentRow, 2);
            Object Book_Type = model.getValueAt(CurrentRow, 3);
            Object Book_Arthor = model.getValueAt(CurrentRow, 4);

            if (jComboBox1.getSelectedIndex() == 2) {
                sqlInsert = "insert into library_section values(?,?,?,?,?,0, NULL, NULL)";
                sql = "delete from restore_Books where BOOK_ID = ?";
            }

            PreparedStatement psDelete = c.prepareStatement(sql);
            psDelete.setObject(1, Book_id);

            psDelete.executeUpdate();

            if (jComboBox1.getSelectedIndex() == 2) {
                PreparedStatement psInsert = c.prepareStatement(sqlInsert);

                psInsert.setInt(1, Integer.parseInt(String.valueOf(Book_id)));
                psInsert.setString(2, String.valueOf(Book_name));
                psInsert.setInt(3, Integer.parseInt(String.valueOf(Book_Price)));
                psInsert.setString(4, String.valueOf(Book_Type));
                psInsert.setString(5, String.valueOf(Book_Arthor));

                psInsert.executeUpdate();
                psInsert.close();
            }

            JOptionPane.showMessageDialog(this, "The Book Is Restored");

        } catch (ClassNotFoundException ex) {
            playMusic("sound\\Error.wav");
            JOptionPane.showMessageDialog(this, "Database driver not found: " + ex.getMessage());
            Logger.getLogger(LibraryMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            playMusic("sound\\Error.wav");
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
            Logger.getLogger(LibraryMain.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        playMusic("sound\\click.wav");

        IssueSectiontop.setBackground(new Color(0xEDECEC));
        BookSectiontop.setBackground(new Color(0xc5c5c5));
        jTabbedPane1.setSelectedIndex(2);

    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        playMusic("sound\\click.wav");
        IssueSectiontop.setBackground(new Color(0xEDECEC));
        BookSectiontop.setBackground(new Color(0xc5c5c5));
        jTabbedPane1.setSelectedIndex(2);

    }//GEN-LAST:event_jLabel5MouseClicked

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped

    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyTyped
    }//GEN-LAST:event_jTextField4KeyTyped

    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
    }//GEN-LAST:event_jTextField5KeyTyped

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        playMusic("sound\\click.wav");
        new BooksMain().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    public void playMusic(String file) {
        try {
            // حدد مسار ملف الصوت هنا
            File soundFile = new File(file);
            if (!soundFile.exists()) {
                throw new IOException("File not found: " + soundFile.getAbsolutePath());
            }
            Clip clip = AudioSystem.getClip();
            clip.open(AudioSystem.getAudioInputStream(soundFile));
            clip.start();
        } catch (UnsupportedAudioFileException ex) {
            playMusic("sound\\Error.wav");
            System.err.println("Unsupported audio file format.");
            ex.printStackTrace();
        } catch (LineUnavailableException ex) {
            playMusic("sound\\Error.wav");
            System.err.println("Audio line for playing back is unavailable.");
            ex.printStackTrace();
        } catch (IOException ex) {
            playMusic("sound\\Error.wav");
            System.err.println("I/O error while playing the audio file.");
            ex.printStackTrace();
        } catch (Exception ex) {
            playMusic("sound\\Error.wav");
            System.err.println("An unexpected error occurred.");
            ex.printStackTrace();
        }

    }

    private void writeHtmlReport(String content) {
        try {
            File reportFile = new File("library_report.html");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(reportFile))) {
                writer.write(content);
            }
            Desktop.getDesktop().browse(reportFile.toURI());

        } catch (IOException ex) {
            playMusic("sound\\Error.wav");
            Logger.getLogger(LibraryMain.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void updateTable() {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection c = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "123");
            String sql = "SELECT book_id, book_name, book_price, book_type, book_author, "
                    + "TRUNC(SYSDATE) - TRUNC(checkout_time) AS days_elapsed, "
                    + "EXTRACT(HOUR FROM (SYSDATE - checkout_time)) AS hours_elapsed, "
                    + "EXTRACT(MINUTE FROM (SYSDATE - checkout_time)) AS minutes_elapsed, "
                    + "EXTRACT(SECOND FROM (SYSDATE - checkout_time)) AS seconds_elapsed "
                    + "FROM library_section WHERE is_checked_out = 1 AND checkout_time IS NOT NULL ORDER BY book_id";
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery(sql);
            DefaultTableModel dtm = (DefaultTableModel) IssueTable.getModel();
            dtm.setRowCount(0);
            while (rs.next()) {
                long days = rs.getLong("days_elapsed");
                long hours = rs.getLong("hours_elapsed") % 24;
                long minutes = rs.getLong("minutes_elapsed") % 60;
                long seconds = rs.getLong("seconds_elapsed") % 60;

                dtm.addRow(new Object[]{
                    rs.getString("book_id"),
                    rs.getString("book_name"),
                    rs.getDouble("book_price"),
                    rs.getString("book_type"),
                    rs.getString("book_author"),
                    days + " days، " + hours + " hours، " + minutes + " minutes، " + seconds + " seconds"
                });
            }
        } catch (ClassNotFoundException ex) {
            playMusic("sound\\Error.wav");
            System.out.println(ex.getMessage());
        } catch (SQLException ex) {
            playMusic("sound\\Error.wav");
            System.out.println(ex.getMessage());
        }
    }

    public boolean regex() {
        if (nameRegex(jTextField2.getText(), "Book name must start with words")
                && Words(jTextField4.getText(), "Book type must By only words")
                && Words(jTextField5.getText(), "Book author must By only words")
                && Numbers(jTextField3.getText(), "Book Price must By only number")) {
            return true;
        }
        playMusic("sound\\Error.wav");
        return false;
    }

    public boolean Numbers(String text, String massage) {
        if (!text.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, massage);
            return false;
        }
        return true;
    }

    public boolean Words(String text, String massage) {
        if (!text.matches("[a-zA-Z]+")) {
            JOptionPane.showMessageDialog(this, massage);
            return false;
        }
        return true;
    }

    public boolean nameRegex(String text, String massage) {
        if (!text.matches("^[a-zA-Z]+[a-zA-Z0-9]*$")) {
            JOptionPane.showMessageDialog(this, massage);
            return false;
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibraryMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibraryMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibraryMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibraryMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibraryMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BG;
    private javax.swing.JPanel BookSectionDown;
    private javax.swing.JPanel BookSectiontop;
    private javax.swing.JPanel DownSide;
    private javax.swing.JPanel Home;
    private javax.swing.JPanel IssueSectionDown;
    private javax.swing.JPanel IssueSectiontop;
    private javax.swing.JTable IssueTable;
    private javax.swing.JPanel LogOut;
    private javax.swing.JPanel TopSide;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
